# Generated by Django 3.2.25 on 2024-07-31 16:38

from django.db import migrations, models
from django.db.migrations.operations.special import RunSQL
from django.db.migrations.operations.base import Operation


azure_sql_index = """
CREATE INDEX CONCURRENTLY IF NOT EXISTS "io_storages_azureblobexportstoragelink_annotation_id_6cc15c83" ON "io_storages_azureblobexportstoragelink" ("annotation_id");
"""

azure_sql_fk = """
ALTER TABLE "io_storages_azureblobexportstoragelink" DROP CONSTRAINT IF EXISTS "io_storages_azureblo_annotation_id_6cc15c83_fk_task_comp";
ALTER TABLE "io_storages_azureblobexportstoragelink" ADD CONSTRAINT "io_storages_azureblo_annotation_id_6cc15c83_fk_task_comp" FOREIGN KEY ("annotation_id") REFERENCES "task_completion" ("id") DEFERRABLE INITIALLY DEFERRED;
"""

gcs_sql_index = """
CREATE INDEX CONCURRENTLY IF NOT EXISTS "io_storages_gcsexportstoragelink_annotation_id_2df715a6" ON "io_storages_gcsexportstoragelink" ("annotation_id");
"""

gcs_sql_fk = """
ALTER TABLE "io_storages_gcsexportstoragelink" DROP CONSTRAINT IF EXISTS "io_storages_gcsexpor_annotation_id_2df715a6_fk_task_comp";
ALTER TABLE "io_storages_gcsexportstoragelink" ADD CONSTRAINT  "io_storages_gcsexpor_annotation_id_2df715a6_fk_task_comp" FOREIGN KEY ("annotation_id") REFERENCES "task_completion" ("id") DEFERRABLE INITIALLY DEFERRED;

"""

local_files_sql_index = """
CREATE INDEX CONCURRENTLY IF NOT EXISTS "io_storages_localfilesexportstoragelink_annotation_id_fc4f9825" ON "io_storages_localfilesexportstoragelink" ("annotation_id");
"""

local_files_sql_fk = """
ALTER TABLE "io_storages_localfilesexportstoragelink" DROP CONSTRAINT IF EXISTS "io_storages_localfil_annotation_id_fc4f9825_fk_task_comp";
ALTER TABLE "io_storages_localfilesexportstoragelink" ADD CONSTRAINT "io_storages_localfil_annotation_id_fc4f9825_fk_task_comp" FOREIGN KEY ("annotation_id") REFERENCES "task_completion" ("id") DEFERRABLE INITIALLY DEFERRED;
"""


redis_sql_index = """
CREATE INDEX CONCURRENTLY IF NOT EXISTS "io_storages_redisexportstoragelink_annotation_id_8547e508" ON "io_storages_redisexportstoragelink" ("annotation_id");
"""

redis_sql_fk = """
ALTER TABLE "io_storages_redisexportstoragelink"  DROP CONSTRAINT IF EXISTS "io_storages_redisexp_annotation_id_8547e508_fk_task_comp";
ALTER TABLE "io_storages_redisexportstoragelink" ADD CONSTRAINT "io_storages_redisexp_annotation_id_8547e508_fk_task_comp" FOREIGN KEY ("annotation_id") REFERENCES "task_completion" ("id") DEFERRABLE INITIALLY DEFERRED;
"""


s3_sql_index = """
CREATE INDEX CONCURRENTLY IF NOT EXISTS "io_storages_s3exportstoragelink_annotation_id_729994fe" ON "io_storages_s3exportstoragelink" ("annotation_id");
"""

s3_sql_fk = """
--
-- Alter field annotation on s3exportstoragelink
--
ALTER TABLE "io_storages_s3exportstoragelink" DROP CONSTRAINT IF EXISTS "io_storages_s3export_annotation_id_729994fe_fk_task_comp";
ALTER TABLE "io_storages_s3exportstoragelink" ADD CONSTRAINT "io_storages_s3export_annotation_id_729994fe_fk_task_comp" FOREIGN KEY ("annotation_id") REFERENCES "task_completion" ("id") DEFERRABLE INITIALLY DEFERRED;
"""


class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('tasks', '0047_merge_20240318_2210'),
        ('io_storages', '0016_add_aws_sse_kms_key'),
    ]

    operations = [
        migrations.RunSQL(
            sql=azure_sql_index,
            reverse_sql=RunSQL.noop # We won't remove the index. If we reverse the migration then go forward again, the index creation query is idempotent
        ),
        migrations.RunSQL(
            sql=azure_sql_fk,
            reverse_sql=RunSQL.noop # The previous state would be a io_storages_azureblo_annotation_id_6cc15c83_fk_task_comp constraint that is unique on annotation_id. Getting to that state would destroy data. NOOP works here because  *_sql_fk will clean up existing constraints and is idempotent
        ),
        migrations.RunSQL(
            sql=gcs_sql_index,
            reverse_sql=RunSQL.noop
        ),
        migrations.RunSQL(
            sql=gcs_sql_fk,
            reverse_sql=RunSQL.noop
        ),
        migrations.RunSQL(
            sql=local_files_sql_index,
            reverse_sql=RunSQL.noop
        ),
        migrations.RunSQL(
            sql=local_files_sql_fk,
            reverse_sql=RunSQL.noop
        ),
        migrations.RunSQL(
            sql=redis_sql_index,
            reverse_sql=RunSQL.noop
        ),
        migrations.RunSQL(
            sql=redis_sql_fk,
            reverse_sql=RunSQL.noop
        ),
        migrations.RunSQL(
            sql=s3_sql_index,
            reverse_sql=RunSQL.noop
        ),
        migrations.RunSQL(
            sql=s3_sql_fk,
            reverse_sql=RunSQL.noop
        ),
    ]