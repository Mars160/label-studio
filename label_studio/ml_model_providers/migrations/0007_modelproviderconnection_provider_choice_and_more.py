# Generated by Django 5.1.5 on 2025-01-17 19:47

from django.db import migrations, models
from pydantic import BaseModel
from enum import Enum

# copy data as it existed at the time of the migration
class ModelProviderConfig(BaseModel):
    litellm_slug: str
    display_name: str


class ModelProviderChoices(Enum):
    OPENAI = ModelProviderConfig(litellm_slug="openai", display_name="OpenAI")
    AZURE_OPENAI = ModelProviderConfig(litellm_slug="azure", display_name="AzureOpenAI")
    VERTEX_AI = ModelProviderConfig(litellm_slug="vertex_ai", display_name="VertexAI")
    CUSTOM = ModelProviderConfig(litellm_slug="openai", display_name="Custom")
    
# specify how to map data across the migration
def copy_provider_to_provider_choice(apps, schema_editor):
    ModelProviderConnection = apps.get_model('ml_model_providers', 'ModelProviderConnection')
    provider_to_choice_dct = {c.value.display_name: c.name for c in ModelProviderChoices}
    for connection in ModelProviderConnection.objects.all():
        try:
            connection.provider_choice = provider_to_choice_dct[connection.provider]
            connection.save()
        except KeyError:
            pass
            

def copy_provider_choice_to_provider(apps, schema_editor):
    ModelProviderConnection = apps.get_model('ml_model_providers', 'ModelProviderConnection')
    for connection in ModelProviderConnection.objects.all():
        try:
            config = ModelProviderChoices[connection.provider_choice].value
            connection.provider = config.display_name
            connection.save()
        except KeyError:
            pass

        
class Migration(migrations.Migration):

    dependencies = [
        (
            "ml_model_providers",
            "0006_modelproviderconnection_google_application_credentials_and_more",
        ),
    ]

    operations = [
        migrations.AddField(
            model_name="modelproviderconnection",
            name="provider_choice",
            field=models.CharField(
                blank=True, help_text="Model provider name", max_length=255, null=True
            ),
        ),
        migrations.AlterField(
            model_name="modelproviderconnection",
            name="provider",
            field=models.CharField(
                choices=[
                    ("OpenAI", "OpenAI"),
                    ("AzureOpenAI", "AzureOpenAI"),
                    ("VertexAI", "VertexAI"),
                    ("Custom", "Custom"),
                ],
                default="OpenAI",
                editable=False,
                help_text="Deprecated in favor of provider_choice",
                max_length=255,
            ),
        ),
        migrations.RunPython(
            copy_provider_to_provider_choice,
            copy_provider_choice_to_provider
        ),

    ]
