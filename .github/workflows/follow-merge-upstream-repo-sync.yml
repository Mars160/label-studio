name: 'Follow Merge: Upstream repo sync'

on:
  repository_dispatch:
    types:
      - upstream_repo_update

concurrency:
  group: ${{ github.workflow }}-${{ github.event.client_payload.branch_name }}

env:
  NODE: 18
  CACHE_NAME_PREFIX: v1
  RELEASE_BRANCH_PREFIX: "ls-release/"
  DOCS_TARGET_DIR: "docs/source/tags/"

jobs:
  open:
    name: Sync PR
    if: |
      github.event.client_payload.event_action == 'opened' ||
      github.event.client_payload.event_action == 'synchronize' ||
      github.event.client_payload.event_action == 'merged'
    runs-on: ubuntu-latest
    steps:
      - uses: hmarr/debug-action@v3.0.0

      - name: Details
        id: details
        shell: bash
        env:
          REPO_NAME: "${{ github.event.client_payload.repo_name }}"
        run: |
          set -xeuo pipefail
          
          case "${REPO_NAME}" in
            */label-studio-sdk)
              echo "poetry=true" >> "${GITHUB_OUTPUT}"
              ;;
            *)
              echo "::error::Repository ${REPO_NAME} is not supported"
              exit 1
              ;;
          esac

      - name: Checkout Actions Hub
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_PAT }}
          repository: HumanSignal/actions-hub
          path: ./.github/actions-hub

      - name: Parse Follow Merge dispatch event payload
        uses: ./.github/actions-hub/actions/follow-merge-parse-payload
        id: fm

      - name: Find or Create branch
        uses: ./.github/actions-hub/actions/github-find-or-create-branch
        id: get-branch
        with:
          github_token: ${{ secrets.GIT_PAT }}
          branch_name: "${{ steps.fm.outputs.branch_name }}"

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GIT_PAT }}
          fetch-depth: 0
          ref: ${{ steps.get-branch.outputs.name }}

      - name: Git Configure
        uses: ./.github/actions-hub/actions/git-configure
        with:
          username: ${{ steps.fm.outputs.author_username }}
          email: ${{ steps.fm.outputs.author_email }}

# Merge

      - name: Git Merge
        id: merge
        continue-on-error: true
        uses: ./.github/actions-hub/actions/git-merge
        with:
          base_branch: ${{ steps.get-branch.outputs.base_name }}
          head_branch: ${{ steps.get-branch.outputs.name }}
          our_files: "pyproject.toml poetry.lock web"

# Frontend

      - name: "Frontend: Checkout module"
        if: steps.details.outputs.copy_src_path
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.repo_name }}
          path: tmp
          token: ${{ secrets.GIT_PAT }}
          fetch-depth: 1
          ref: ${{ github.event.client_payload.commit_sha }}

      - name: "Frontend: Commit and Push"
        if: steps.details.outputs.copy_src_path
        shell: bash
        env:
          COPY_SRC_PATH: ${{ steps.details.outputs.copy_src_path }}
          COPY_SRC_PRESERVE_PATH: ${{ steps.details.outputs.copy_src_preserve_path }}
        run: |
          set -xeuo pipefail
          
          preserve_dir=$(mktemp -d)
          if [ -n "${COPY_SRC_PRESERVE_PATH}" ] && [ -d "${COPY_SRC_PRESERVE_PATH}" ]; then
            echo "Preserving ${COPY_SRC_PRESERVE_PATH}"
            cp -r "${COPY_SRC_PRESERVE_PATH}" "${preserve_dir}"
          fi 

          rm -r "${COPY_SRC_PATH}" || true
          mkdir -p "${COPY_SRC_PATH}"
          cp -r tmp/src/* "${COPY_SRC_PATH}"

          if [ -n "${COPY_SRC_PRESERVE_PATH}" ]; then
            echo "Restoring preserved files"
            cp -rf ${preserve_dir}/* "${COPY_SRC_PATH}"
          fi 

          git add "${COPY_SRC_PATH}"
          git status -s
          git commit --allow-empty -m '[submodules] Copy src ${{ github.event.client_payload.repo_name }}' -m 'Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          git push origin HEAD

# POETRY

      - name: "Poetry: Set up"
        if: steps.details.outputs.poetry
        uses: snok/install-poetry@v1

      - name: "Poetry: Commit and Push"
        if: steps.details.outputs.poetry
        shell: bash
        run: |
          set -xeuo pipefail

          poetry add "https://github.com/${{ github.event.client_payload.repo_name }}/archive/${{ github.event.client_payload.commit_sha }}.zip" --lock

          git add pyproject.toml poetry.lock
          git status -s
          git commit --allow-empty -m '[submodules] Bump ${{ github.event.client_payload.repo_name }} version' -m 'Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          git push origin HEAD

# LSF Docs

      - name: "LSF Docs: Setup nodejs"
        uses: actions/setup-node@v4
        if: steps.details.outputs.build_lsf_docs
        with:
          node-version: "${{ env.NODE }}"

      - name: "LSF Docs: Cache node modules"
        if: steps.details.outputs.build_lsf_docs
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ env.CACHE_NAME_PREFIX }}-${{ runner.os }}-node-${{ env.NODE }}-jsdoc-to-markdown

      - name: "LSF Docs: Install NPM deps"
        if: steps.details.outputs.build_lsf_docs
        continue-on-error: true
        working-directory: tmp/scripts
        run: npm install -g jsdoc-to-markdown node-fetch

      - name: "LSF Docs: Build"
        id: lsf-docs-build
        if: steps.details.outputs.build_lsf_docs
        continue-on-error: true
        working-directory: tmp/scripts
        run: NODE_PATH=$(npm root -g) node create-docs.js

      - name: "LSF Docs: Commit and Push"
        if: steps.details.outputs.build_lsf_docs && steps.lsf-docs-build.conclusion == 'success'
        continue-on-error: true
        run: |
          set -xeuo pipefail
          docs_target_dir='${{ env.DOCS_TARGET_DIR }}'
          find "${docs_target_dir}" ! -name 'index.md' -type f -exec rm -rf {} +
          mkdir -p "${docs_target_dir}"
          cp -Rf tmp/docs/* "${docs_target_dir}"
          git status
          git add "${docs_target_dir}"
          git commit -m 'docs: LSF Update' -m 'Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          git push origin HEAD


      - name: Find or Create PR
        uses: ./.github/actions-hub/actions/github-find-or-create-pull-request
        id: get-pr
        with:
          github_token: ${{ secrets.GIT_PAT }}
          branch_name: "${{ steps.get-branch.outputs.branch_name }}"
          title: "${{ steps.fm.outputs.title }}"
          description: |
            Hi @${{ steps.fm.outputs.actor }}!
            
            This PR was automaticaly generated via Follow Merge. 
            Please ensure that all linked upstream Pull Requests are merged before proceeding with this one.

      - name: Add PR Reviewers
        uses: ./.github/actions-hub/actions/github-add-pull-request-reviewers
        continue-on-error: true
        with:
          github_token: ${{ secrets.GIT_PAT }}
          pullrequest_number: "${{ steps.get-pr.outputs.number }}"
          reviewers: "${{ steps.fm.outputs.actor }}"

      - name: Link PR
        uses: ./.github/actions-hub/actions/github-link-upstream-pull-request
        continue-on-error: true
        with:
          github_token: ${{ secrets.GIT_PAT }}
          pullrequest_number: "${{ steps.get-pr.outputs.number }}"
          upstream_pullrequest_link: "${{ steps.fm.outputs.pr_html_url }}"

      - name: Convert to ready for review
        if: steps.fm.outputs.event_action == 'merged'
        id: ready-for-review-pr
        shell: bash
        env:
          GIT_PAT: ${{ secrets.GIT_PAT }}
        run: |
          echo "$GIT_PAT" | gh auth login --with-token
          gh api graphql -F id='${{ steps.get-pr.outputs.node_id }}' -f query='
            mutation($id: ID!) {
              markPullRequestReadyForReview(input: { pullRequestId: $id }) {
                pullRequest {
                  id
                }
              }
            }
          '

      - name: Enable AutoMerge
        id: enable-pr-automerge
        if: github.event.client_payload.event_action == 'merged'
        shell: bash
        env:
          GIT_PAT: ${{ secrets.GIT_PAT }}
        run: |
          echo "$GIT_PAT" | gh auth login --with-token
          gh api graphql -f pull='${{ steps.get-pr.outputs.node_id }}' -f query='
            mutation($pull: ID!) {
              enablePullRequestAutoMerge(input: {pullRequestId: $pull, mergeMethod: SQUASH}) {
                pullRequest {
                  id
                  number
                }
              }
            }'


  others:
    name: Other actions with PR
    if: |
      github.event.client_payload.event_action == 'converted_to_draft' ||
      github.event.client_payload.event_action == 'ready_for_review' ||
      github.event.client_payload.event_action == 'closed'
    runs-on: ubuntu-latest
    steps:
      - uses: hmarr/debug-action@v3.0.0

      - name: Get PR
        uses: actions/github-script@v7
        id: get-pr
        with:
          github-token: ${{ secrets.GIT_PAT }}
          script: |
            const {repo, owner} = context.repo;
            const branchName = '${{ github.event.client_payload.branch_name }}';
            const branchNameLowerCase = branchName.toLowerCase();
            const {data: listPullsResponse} = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:${branchName}`,
              per_page: 1
            });
            const {data: listPullsResponseLowerCase} = await github.rest.pulls.list({
              owner,
              repo,
              head: `${owner}:${branchNameLowerCase}`,
              per_page: 1
            });
            
            if (listPullsResponse.length !== 0) {
              console.log(`Found PR for branch '${branchName}'`)
              core.setOutput("branch-name", branchName);
              return listPullsResponse
            } else if (listPullsResponseLowerCase.length !== 0) {
              console.log(`Found PR for branch '${branchNameLowerCase}'`)
              core.setOutput("branch-name", branchNameLowerCase);
              return listPullsResponseLowerCase
            } else {
              console.log(`PR for branch '${branchNameLowerCase}' is not created yet`)
              core.setOutput("branch-name", branchNameLowerCase);
              return listPullsResponseLowerCase
            }

      - name: Close PR
        if: github.event.client_payload.event_action == 'closed'
        id: close-pr
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GIT_PAT }}
          script: |
            const { repo, owner } = context.repo;
            const listPullsResponse = ${{ steps.get-pr.outputs.result }}
            for (let pr of listPullsResponse ) {
              core.info(`Closing ${ pr.html_url }`)
              github.rest.pulls.update({
                owner,
                repo,
                pull_number: pr.number,
                state: 'close'
              });
            }

      - name: Convert to draft
        if: github.event.client_payload.event_action == 'converted_to_draft'
        id: convert-pr-to-draft
        shell: bash
        env:
          GIT_PAT: ${{ secrets.GIT_PAT }}
        run: |
          echo "$GIT_PAT" | gh auth login --with-token
          gh api graphql -F id='${{ fromJson(steps.get-pr.outputs.result)[0].node_id }}' -f query='
            mutation($id: ID!) {
              convertPullRequestToDraft(input: { pullRequestId: $id }) {
                pullRequest {
                  id
                  isDraft
                }
              }
            }
          '

      - name: Convert to ready for review
        if: github.event.client_payload.event_action == 'ready_for_review'
        id: ready-for-review-pr
        shell: bash
        env:
          GIT_PAT: ${{ secrets.GIT_PAT }}
        run: |
          echo "$GIT_PAT" | gh auth login --with-token
          gh api graphql -F id='${{ fromJson(steps.get-pr.outputs.result)[0].node_id }}' -f query='
            mutation($id: ID!) {
              markPullRequestReadyForReview(input: { pullRequestId: $id }) {
                pullRequest {
                  id
                }
              }
            }
          '
